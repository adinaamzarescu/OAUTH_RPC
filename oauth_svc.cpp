/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include "oauth.h"
#include <stdio.h>
#include <stdlib.h>
#include <rpc/pmap_clnt.h>
#include <string.h>
#include <memory.h>
#include <sys/socket.h>
#include <netinet/in.h>

#ifndef SIG_PF
#define SIG_PF void (*)(int)
#endif

vector<user_credentials> user_list;
vector<string> resources;
int token_validity_seconds;
ifstream input_file_4;

static void
oauth_1(struct svc_req *rqstp, SVCXPRT *transp)
{
	union
	{
		char *request_authorization_1_arg;
		struct token_refresh_request request_access_token_1_arg;
		struct operation_details validate_delegated_action_1_arg;
		char *approve_request_token_1_arg;
		char *check_valability_1_arg;
	} argument;
	char *result;
	xdrproc_t _xdr_argument, _xdr_result;
	char *(*local)(char *, struct svc_req *);

	switch (rqstp->rq_proc)
	{
	case NULLPROC:
		(void)svc_sendreply(transp, (xdrproc_t)xdr_void, (char *)NULL);
		return;

	case request_authorization:
		_xdr_argument = (xdrproc_t)xdr_wrapstring;
		_xdr_result = (xdrproc_t)xdr_wrapstring;
		local = (char *(*)(char *, struct svc_req *))request_authorization_1_svc;
		break;

	case request_access_token:
		_xdr_argument = (xdrproc_t)xdr_token_refresh_request;
		_xdr_result = (xdrproc_t)xdr_token_details;
		local = (char *(*)(char *, struct svc_req *))request_access_token_1_svc;
		break;

	case validate_delegated_action:
		_xdr_argument = (xdrproc_t)xdr_operation_details;
		_xdr_result = (xdrproc_t)xdr_wrapstring;
		local = (char *(*)(char *, struct svc_req *))validate_delegated_action_1_svc;
		break;

	case approve_request_token:
		_xdr_argument = (xdrproc_t)xdr_wrapstring;
		_xdr_result = (xdrproc_t)xdr_wrapstring;
		local = (char *(*)(char *, struct svc_req *))approve_request_token_1_svc;
		break;

	case check_token_validity:
		_xdr_argument = (xdrproc_t)xdr_wrapstring;
		_xdr_result = (xdrproc_t)xdr_int;
		local = (char *(*)(char *, struct svc_req *))check_token_validity_1_svc;
		break;

	default:
		svcerr_noproc(transp);
		return;
	}
	memset((char *)&argument, 0, sizeof(argument));
	if (!svc_getargs(transp, (xdrproc_t)_xdr_argument, (caddr_t)&argument))
	{
		svcerr_decode(transp);
		return;
	}
	result = (*local)((char *)&argument, rqstp);
	if (result != NULL && !svc_sendreply(transp, (xdrproc_t)_xdr_result, result))
	{
		svcerr_systemerr(transp);
	}
	if (!svc_freeargs(transp, (xdrproc_t)_xdr_argument, (caddr_t)&argument))
	{
		fprintf(stderr, "%s", "unable to free arguments");
		exit(1);
	}
	return;
}

int main(int argc, char **argv)
{
	SVCXPRT *transp;

	pmap_unset(OAUTH, OAUTHVERS);

	transp = svcudp_create(RPC_ANYSOCK);
	if (transp == NULL)
	{
		fprintf(stderr, "%s", "cannot create udp service.");
		exit(1);
	}
	if (!svc_register(transp, OAUTH, OAUTHVERS, oauth_1, IPPROTO_UDP))
	{
		fprintf(stderr, "%s", "unable to register (OAUTH, OAUTHVERS, udp).");
		exit(1);
	}

	transp = svctcp_create(RPC_ANYSOCK, 0, 0);
	if (transp == NULL)
	{
		fprintf(stderr, "%s", "cannot create tcp service.");
		exit(1);
	}
	if (!svc_register(transp, OAUTH, OAUTHVERS, oauth_1, IPPROTO_TCP))
	{
		fprintf(stderr, "%s", "unable to register (OAUTH, OAUTHVERS, tcp).");
		exit(1);
	}

	char *userIdFile, *approvalsFile, *resourcesFile;
	userIdFile = (char *)malloc(50);
	approvalsFile = (char *)malloc(50);
	resourcesFile = (char *)malloc(50);
	strcpy(userIdFile, argv[1]);
	strcpy(resourcesFile, argv[2]);
	strcpy(approvalsFile, argv[3]);

	token_validity_seconds = stoi(argv[4]);
	ifstream inputFile1(userIdFile);

	if (!inputFile1.is_open())
	{
		cout << "erorr at opening file!";
		return 0;
	}

	string line;
	getline(inputFile1, line, '\n');
	int size = stoi(line);
	for (int i = 0; i < size; i++)
	{
		getline(inputFile1, line, '\n');
		user_credentials u;
		u.user_identifier = (char *)malloc(20);
		strcpy(u.user_identifier, line.c_str());
		u.tokens.request_token = (char *)malloc(50);
		user_list.push_back(u);
	}

	inputFile1.close();

	ifstream inputFile2(resourcesFile);

	if (!inputFile2.is_open())
	{
		cout << "erorr at opening file!";
		return 0;
	}

	getline(inputFile2, line, '\n');
	size = stoi(line);
	for (int i = 0; i < size; i++)
	{
		getline(inputFile2, line, '\n');
		resources.push_back(line);
	}

	inputFile2.close();

	input_file_4.open(approvalsFile);
	if (!input_file_4.is_open())
	{
		cout << "erorr at opening file!";
		return 0;
	}
	free(userIdFile);
	free(resourcesFile);
	free(approvalsFile);

	setbuf(stdout, NULL);
	svc_run();
	fprintf(stderr, "%s", "svc_run returned");
	exit(1);
	/* NOTREACHED */
}
